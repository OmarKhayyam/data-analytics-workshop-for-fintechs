AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  TeamRoleArn:
    Type: String
    Description: ARN of the TeamRole IAM Role
Resources:
  WSGlueKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A key for encryting data written to S3 by Glue components
      EnableKeyRotation: 'true'
      PendingWindowInDays: 7
      KeyPolicy:
        Version: '2012-10-17'
        Id: securityconfig-s3enc-key
        Statement:
          - Sid: Enable IAM user permissions
            Effect: Allow
            Principal:
              AWS: !Ref TeamRoleArn
            Action: kms:*
            Resource: '*'
          - Sid: Allow use of key
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:generateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
          - Sid: Allow use of key
            Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:generateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
          - Sid: Allow use of key
            Effect: Allow
            Principal:
              AWS: !GetAtt WSGlueRole.Arn
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:generateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
  WSGlueSecurityConfig:
    Type: AWS::Glue::SecurityConfiguration
    Properties:
      EncryptionConfiguration:
        S3Encryptions:
          - S3EncryptionMode: SSE-KMS
            KmsKeyArn: !GetAtt WSGlueKMSKey.Arn
      Name: Workshop-Glue-SecurityConfig
  WSGlueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
        - 'arn:aws:iam::aws:policy/AmazonKinesisReadOnlyAccess'
      Policies:
        - PolicyName: GlueS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
  WSDCEncKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A key for Data Catalog
      EnableKeyRotation: 'true'
      PendingWindowInDays: 7
      KeyPolicy:
        Version: '2012-10-17'
        Id: datacatalog-key
        Statement:
          - Sid: Enable IAM user permissions
            Effect: Allow
            Principal:
              AWS: !Ref TeamRoleArn
            Action: kms:*
            Resource: '*'
          - Sid: Allow use of key
            Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:generateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
          - Sid: Allow use of key
            Effect: Allow
            Principal:
              AWS: !GetAtt WSGlueRole.Arn
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:generateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
  WSDCEncryption:
    Type: AWS::Glue::DataCatalogEncryptionSettings
    Properties:
      CatalogId: !Ref AWS::AccountId
      DataCatalogEncryptionSettings:
        EncryptionAtRest:
          CatalogEncryptionMode: SSE-KMS
          SseAwsKmsKeyId: !GetAtt WSDCEncKey.KeyId
  WSGlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: datalakeworkshopdb
        Description: Database to hold tables for this workshop
  GlueOutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: 'true'
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !GetAtt WSGlueKMSKey.KeyId
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: 'true'
  VPCESecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for VPC Kinesis Endpoint
      GroupName: ws-VPCE-sg
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 10.0.0.0/16
  VPCEforKinesis:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt KinesisIngestRole.Arn
            Action: 'kinesis:*'
            Resource: '*'
      PrivateDnsEnabled: 'true'
      SecurityGroupIds:
        - !GetAtt VPCESecurityGroup.GroupId
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.kinesis-streams'
      SubnetIds:
        - !Ref EC2PublicSubnet
        - !Ref RDSPrivateSubnet1
        - !Ref RDSPrivateSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref LabVPC
  KinesisIngestRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - dms.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Role for ingesting data into Kinesis Data Stream
      Path: /
      Policies:
        - PolicyName: KinesisIngest
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'kinesis:DescribeStream'
                  - 'kinesis:PutRecords'
                  - 'kinesis:PutRecord'
                Resource: '*'
      RoleName: ws-kinesis-ingest-role
  WSKinesisKey:
    Type: AWS::KMS::Key
    DependsOn: KinesisIngestRole
    Properties:
      Description: A key for Kinesis
      EnableKeyRotation: 'true'
      PendingWindowInDays: 7
      KeyPolicy:
        Version: '2012-10-17'
        Id: kinesis-key
        Statement:
          - Sid: Enable IAM user permissions
            Effect: Allow
            Principal:
              AWS: !Ref TeamRoleArn
            Action: kms:*
            Resource: '*'
          - Sid: Allow use of key
            Effect: Allow
            Principal:
              Service: kinesis.amazonaws.com
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:generateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
          - Sid: Allow use of key
            Effect: Allow
            Principal:
              AWS: !GetAtt KinesisIngestRole.Arn
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:generateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
          - Sid: Allow use of key by Glue
            Effect: Allow
            Principal:
              AWS: !GetAtt WSGlueRole.Arn
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:generateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
          - Sid: Allow use of key
            Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:generateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
  WSKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: 'stream-destination'
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: !GetAtt WSKinesisKey.KeyId
  DMSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for DMS
      VpcId: !Ref LabVPC
#  DMSSubnetGroup:
#    Type: AWS::DMS::ReplicationSubnetGroup
#    Properties:
#      ReplicationSubnetGroupIdentifier: replication-subnet-group
#      ReplicationSubnetGroupDescription: Subnet group for DMS
#      SubnetIds:
#        - !Ref RDSPrivateSubnet1
#        - !Ref RDSPrivateSubnet2
  LabBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
  LabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  RDSPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: 'us-east-1a'
      VpcId: !Ref LabVPC
  RDSPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: 'us-east-1b'
      VpcId: !Ref LabVPC
  EC2PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: 'us-east-1c'
      VpcId: !Ref LabVPC
  LabPrepIGateway:
    Type: AWS::EC2::InternetGateway
  LabGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref LabPrepIGateway
      VpcId: !Ref LabVPC
  RDSRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LabVPC
  EC2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LabVPC
  EC2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EC2RouteTable
      SubnetId: !Ref EC2PublicSubnet
  RDSRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RDSRouteTable
      SubnetId: !Ref RDSPrivateSubnet1
  RDSRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RDSRouteTable
      SubnetId: !Ref RDSPrivateSubnet2
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: LabGatewayAttach
    Properties:
      RouteTableId: !Ref EC2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref LabPrepIGateway
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Ec2 instance
      GroupName: ws-EC2-sg
      VpcId: !Ref LabVPC
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Role for EC2 instance
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonS3FullAccess
      RoleName: ws-instance-role
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2InstanceRole
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      EbsOptimized: 'true'
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      Monitoring: 'false'
      SecurityGroupIds:
        - !GetAtt Ec2SecurityGroup.GroupId
      SubnetId: !Ref EC2PublicSubnet
      IamInstanceProfile: !Ref Ec2InstanceProfile
  LabInstanceEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref Ec2Instance      
  DBRoleS3Access:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - rds.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName: ws-aurora-s3-load
  ClusterPG:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Custom parameter group for MySQL 5.7
      Family: aurora-mysql5.7
      Parameters:
        aws_default_s3_role: !GetAtt DBRoleS3Access.Arn
        aurora_load_from_s3_role: !GetAtt DBRoleS3Access.Arn
        binlog_format: 'ROW'
        binlog_row_image: 'full'
        binlog_rows_query_log_events: 'ON'
  WorkshopSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: ws-db-subnet-group
      DBSubnetGroupDescription: Subnet group for RDS Aurora
      SubnetIds:
        - !Ref RDSPrivateSubnet1
        - !Ref RDSPrivateSubnet2
  DataSourceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for DB
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt Ec2SecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt DMSSG.GroupId
  DataSourceDB:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    Properties:
      AssociatedRoles:
        - RoleArn: !GetAtt DBRoleS3Access.Arn
      DBClusterParameterGroupName: !Ref ClusterPG
      DBSubnetGroupName: !Ref WorkshopSubnetGroup
      DatabaseName: workshopdb1
      Engine: aurora-mysql
      EngineMode: provisioned
      MasterUserPassword: master123
      MasterUsername: admin
      VpcSecurityGroupIds:
        - !GetAtt DataSourceSG.GroupId
  DataSourceInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DataSourceDB
      DBInstanceClass: db.r5.large
      Engine: aurora-mysql
      AllowMajorVersionUpgrade: 'false'
Outputs:
  SourceAndDataBucket:
    Description: The S3 bucket where source and intermediate data may be stored.
    Value: !Ref LabBucket
  GlueOutputBucket:
    Description: The S3 bucket where all the Glue outputs end up.
    Value: !Ref GlueOutputBucket
  BastionInstance:
    Description: Instance created for data generation
    Value: !Ref Ec2Instance
  DBEndpoint:
    Description: DB endpoint
    Value: !GetAtt DataSourceDB.Endpoint.Address
#  MigrationSubnetGroup:
#    Description: The subnet group the DMS service will use
#    Value: !Ref DMSSubnetGroup
  DMSSecuritygroup:
    Description: SG to enable communication between replication instance and source.
    Value: !GetAtt DMSSG.GroupId
  RoleToEnableDMSIngestToKinesis:
    Description: This role enables DMS to push data to Kinesis
    Value: !GetAtt KinesisIngestRole.Arn
  TargetStream:
    Description: This is the target stream
    Value: !GetAtt WSKinesisStream.Arn
  WorkshopVPC:
    Description: The VPC ID to use for this workshop
    Value: !Ref LabVPC
  WorkshopGlueDatabase:
    Description: The database in which we will create our tables
    Value: !Ref WSGlueDatabase
